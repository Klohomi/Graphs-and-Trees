This method can be applied when the weights are a choice between two like * or # etc..

vector<pair<ll,ll>>g[N];// firsr elemtn in the pair is the node and the second is edge weight

#define INF 1000000000
void 01bfs(ll s){// s is the source from which we need to find the distance
      vll d(V,INF);// V is the number pof verticed(nodes)
      d[s]=0;
      deque <ll>dq;// distance from the source node
      dq.push_front(s);//visited and distance is improving if we push something in the deque
      
      while(!dq.empty()){
            ll u=dq.front();
            dq.pop_front();
            
            for(auto edge:g[u]){
                  ll v=edge.first;
                  ll w=edge.second;
                  if(d[u]+w<d[v]){
                        d[v]=d[u]+w;        // virtually forming a new link between the source node and v
                        if(w)dq.push_back(v);                          
                        else dq.push_front(v);                 //pushing the nodes at the same level at front and those at different at back 
                  }
            }      
          
      }
}

================================================================================
Time complexity is linear O(V+E) while the compolexity for dijkstra is O(ElogV)
01 bfs is better infront of dijkstra..but the restriction on the weights is also there
